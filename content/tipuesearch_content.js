var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:  fqpabi8 \n 個人倉儲:  https://github.com/mdecp2024/hw-41323224 \n 個人網站:  https://mdecp2024.github.io/hw-41323224 \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam-1', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam-1.html'}, {'title': 'w7', 'text': '以下影片說明如何在作業網站加入 Bython 頁面，同時練習 printm與迴圈的用法: \n \n \n 熟悉 sharex 基本功能操作及存檔: \n \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'w5', 'text': "def print_pyramid(height):\nfor i in range(height):\n# 計算空格數\nspaces = ' ' * (height - i - 1)\n# 計算星號數\nstars = '*' * (2 * i + 1)\n# 打印金字塔的一行\nprint(spaces + stars)\n\n# 設定金字塔高度\npyramid_height = 6\nprint_pyramid(pyramid_height)\n\n \n \xa0 \xa0 \xa0 \xa0 * \xa0 \xa0 \xa0 *** \xa0 \xa0 ***** \xa0 \xa0******* \xa0 ********* \xa0*********** \n \n", 'tags': '', 'url': 'w5.html'}, {'title': 'w6', 'text': '操作步驟: \n \n 下載\xa0 python_2025_lite.7z \xa0(可攜程式環境) \n 下載 \xa0 zmq_remote_api_ex_cube_triangle.7z \xa0(利用 Python 控制模擬場景中的物件) \n 進入可攜程式環境中 data/CoppeliaSim 目錄, 開啟 coppeliaSim.exe (機電整合模擬程式, \xa0 原始碼 ) \n 啟動可攜程式環境, 雙點擊 start_ipv6.bat, 系統會啟動四個命令列, 兩個 SciTE 編輯器 \n 執行場景控制程式前, 先處理操作系統的防火牆, 將下列指令存為 .bat 檔案後, 以管理員身分執行, 以便開啟 23000-23050 埠號進出: \n netsh advfirewall firewall add rule name="allow_23000-23050" dir=in action=allow protocol=TCP localport=23000-23050 netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050 \n 開啟 CoppeliaSim 中的視覺串流伺服器: Modules - Connectivity - Visualization stream \n 利用 SciTE 開啟\xa0put_cubes_into_scene_1.py, 利用 Tools - Go 執行操控程式 \n 使用者可以透過瀏覽器, 以模擬場景所在電腦的 IP, 且埠號為 23020 觀看模擬場景 \xa0 \xa0 \xa0 \n \xa0120.113.99.35:23020 \n \n', 'tags': '', 'url': 'w6.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'HW 1 Exam-2', 'text': '', 'tags': '', 'url': 'HW 1 Exam-2.html'}, {'title': 'w10_hw', 'text': '題目一:以下說明如何用 Brython 頁面、SciTE 編輯器、命令提示字元視窗、Jupyter Lab 以及 Codespaces 環境中執行，金字塔所完成的操作影片 \n \n 題目二 \n \n 題目三 \n \n \n', 'tags': '', 'url': 'w10_hw.html'}, {'title': 'w11_hw', 'text': '題目一 \n n = 10 # 圓形的大小，設置為 10x10\nr = 5 # 圓的半徑\ncenter = (5, 5) # 圓心的坐標 (5, 5)\n\n# 使用兩層循環遍歷每個位置\nfor i in range(n): # 對於每一行\nfor j in range(n): # 對於每一列\n# 計算該點 (i, j) 到圓心 (5, 5) 的距離\ndistance = ((i - center[0]) ** 2 + (j - center[1]) ** 2) ** 0.5\n\n# 如果距離接近圓的半徑，則打印 * (表示圓形邊界)\nif abs(distance - r) < 0.5:\nprint(\'*\', end=\' \')\nelse:\nprint(\' \', end=\' \') # 空白處\nprint() # 換行 \n W11題目一(說明) \n draw_grid(width, height, grid_pix)  函數 \n \n \n 功能：創建整個網格 \n 使用巢狀迴圈遍歷網格的每一個位置 \n 繪製淡灰色的網格線 \n \n draw_circle()  函數(數學觀念) \n \n \n distance = math.sqrt((i - center[0])**2 + (j - center[1])**2) \n \n 計算網格中每個點到圓心的歐氏距離 \n 使用畢氏定理：√((x1-x2)² + (y1-y2)²) \n \n \n if abs(distance - r) < 0.5 \n \n 判斷點是否在圓的輪廓附近 \n 誤差範圍設為 0.5，使輪廓看起來更平滑 \n \n \n \n 關鍵變數 \n \n \n gs （Grid Size）：每個網格的像素大小 \n tc （Total Count）：網格總數 \n n ：圓形所在的網格大小 \n r ：圓的半徑 \n center ：圓心座標 \n \n \n \n \n \n \n W11題目二 \n from browser import html\nfrom browser import document as doc\nimport math\n\n# 建立畫布\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 每格的像素數\ngs = 40 # 增加格子大小以便更清楚看到\ntc = 10 # 總列數/行數\n\nctx = canvas.getContext("2d")\n\ndef draw_rect(lux, luy, w, h, s=1, c=\'#cccccc\'):\n"""繪製矩形框線"""\nctx.lineWidth = s\nctx.strokeStyle = c\nctx.beginPath()\nctx.rect(lux, luy, w, h)\nctx.stroke()\n\ndef draw_grid(width, height, grid_pix):\n"""繪製網格"""\nfor i in range(width + 1):\nfor j in range(height + 1):\ndraw_rect(i*grid_pix, j*grid_pix, grid_pix, grid_pix, 1, "lightgrey")\n\ndef fill_cell(x, y, color):\n"""填充特定單元格"""\nctx.fillStyle = color\nctx.fillRect(x*gs, y*gs, gs, gs)\n\ndef draw_circle_in_grid(center_x, center_y, radius_cells):\n"""\n在網格中心繪製圓形\ncenter_x, center_y: 圓心所在的網格座標\nradius_cells: 圓的半徑（以格子為單位）\n"""\nctx.beginPath()\nctx.fillStyle = "blue"\nctx.arc(\n(center_x + 0.5) * gs, # X座標\n(center_y + 0.5) * gs, # Y座標\nradius_cells * gs, # 半徑\n0, # 起始角度\n2 * math.pi # 結束角度\n)\nctx.fill()\n\n# 繪製網格\ndraw_grid(tc, tc, gs)\n\n# 在中心繪製圓形\ndraw_circle_in_grid(tc//2, tc//2, 2) \n \n W11題目二(說明) \n 引入模組 \n \n \n html ：用於創建 HTML 元素 \n document ：用於訪問網頁的 DOM 元素 \n math ：提供數學運算功能 \n \n 畫布初始化 \n \n \n 創建一個 400x400 像素的畫布 \n 將畫布放置在 ID 為  brython_div1  的 div 元素中 \n \n 繪圖參數 \n \n \n gs ：Grid Size，每個網格的像素大小 \n tc ：Total Count，網格的行列數 \n ctx ：Canvas 的 2D 繪圖上下文 \n \n draw_rect() \n \n \n 功能：繪製一個帶有指定顏色和線寬的矩形框 \n 預設顏色為灰色，線寬為1像素 \n \n draw_grid() \n \n \n 功能：使用巢狀迴圈繪製整個網格 \n 每個網格使用淡灰色線框繪製 \n \n fill_cell() \n \n \n 功能：填充指定座標的單一網格 \n 使用指定顏色填滿整個網格 \n \n draw_circle_in_grid() \n \n \n 功能：在指定網格中心繪製圓形 \n 使用  arc()  方法繪製圓形 \n 圓心位置為網格中心（加 0.5 是為了置中） \n 藍色填滿整個圓形 \n \n 繪圖過程 \n \n \n 首先繪製整個網格 \n 然後在網格中心繪製半徑為 2 個格子的藍色圓形 \n \n 程式變數 \n \n \n 可輕鬆調整網格大小  gs \n 可改變網格數量  tc \n 可修改圓形位置和大小 \n 可更換顏色和繪圖樣式 \n \n \n 11/27程式 \n n = 11 # 總共行數\nspace = \'-\'\ncenter = n//2\n#print(center)\n\nfor y in range(n):\nfor x in range(n):\nprint("(", x, ", ", y,")",sep="") \n 圖框 \n \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12_hw', 'text': '\n \n \n \n', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w13', 'text': 'https://mdecp2024.github.io/hw-41323224/content/Brython.html?src=https://gist.githubusercontent.com/41323224/3d5fd1b872986f7ceddcfe5aec164bf4/raw/209ef45619ca7cb4c7bafc3fece50dc6c9da57a9/w13%25E6%2594%25B9.py', 'tags': '', 'url': 'w13.html'}]};